package com.wisecoders.dbs.diagram.util.sql;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

class a {
  public static final int a = -1;
  
  private static final int d = 16384;
  
  public static final int b = 0;
  
  public static final int c = 2;
  
  private static final int[] e = new int[] { 0, 0, 1, 1 };
  
  private static final char[] f = new char[] { 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, '\035', '\024', 
      '\005', Character.MIN_VALUE, '\034', '\002', Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, '\024', '#', '-', '*', Character.MIN_VALUE, '"', '"', '\036', 
      '\'', ')', '\004', '(', ',', '\001', ' ', '\003', '.', '.', 
      '.', '.', '.', '.', '.', '.', '.', '.', ',', ',', 
      '%', '$', '&', '"', Character.MIN_VALUE, '\016', '\032', '\t', '\r', '\007', 
      '\025', '\023', '\030', '\017', '\027', Character.MIN_VALUE, '\b', '\022', '\020', '\026', 
      '\f', Character.MIN_VALUE, '\021', '\006', '\n', '\013', Character.MIN_VALUE, '\031', Character.MIN_VALUE, '\033', 
      Character.MIN_VALUE, '!', '\037', '+', '"', Character.MIN_VALUE, Character.MIN_VALUE, '\016', '\032', '\t', 
      '\r', '\007', '\025', '\023', '\030', '\017', '\027', Character.MIN_VALUE, '\b', '\022', 
      '\020', '\026', '\f', Character.MIN_VALUE, '\021', '\006', '\n', '\013', Character.MIN_VALUE, '\031', 
      Character.MIN_VALUE, '\033', Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, '"', Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, 
      Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE, Character.MIN_VALUE };
  
  private static final int[] g = f();
  
  private static final String h = "\001\000\001\001\001\002\001\003\001\001\002\003\001\001\013\002\001\004\001\001\001\005\001\004\003\003\002\006\001\007\001\004\002\001\002\004\001\001\001\b\001\t\013\002\001\n\001\005\001\013\001\000\001\007\001\f\004\000\001\001\001\r\001\016\001\001\f\002\003\000\b\002\001\017\002\002\001\013\001\002\001\000\005\002\001\020\001\021\001\022\001\020\002\000\001\020\001\000\001\002\013\000\001\021\001\000\001\017\004\000\001\020";
  
  private static int[] f() {
    int[] arrayOfInt = new int[124];
    int i = 0;
    i = a("\001\000\001\001\001\002\001\003\001\001\002\003\001\001\013\002\001\004\001\001\001\005\001\004\003\003\002\006\001\007\001\004\002\001\002\004\001\001\001\b\001\t\013\002\001\n\001\005\001\013\001\000\001\007\001\f\004\000\001\001\001\r\001\016\001\001\f\002\003\000\b\002\001\017\002\002\001\013\001\002\001\000\005\002\001\020\001\021\001\022\001\020\002\000\001\020\001\000\001\002\013\000\001\021\001\000\001\017\004\000\001\020", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int a(String paramString, int paramInt, int[] paramArrayOfint) {
    byte b1 = 0;
    int i = paramInt;
    int j = paramString.length();
    label10: while (b1 < j) {
      char c1 = paramString.charAt(b1++);
      char c2 = paramString.charAt(b1++);
      while (true) {
        paramArrayOfint[i++] = c2;
        if (--c1 <= '\000')
          continue label10; 
      } 
    } 
    return i;
  }
  
  private static final int[] i = g();
  
  private static final String j = "\000\000\000/\000^\000\000¼\000ë\000Ě\000ŉ\000Ÿ\000Ƨ\000ǖ\000ȅ\000ȴ\000ɣ\000ʒ\000ˁ\000˰\000̟\000͎\000ͽ\000ά\000ϛ\000Њ\000ͽ\000й\000Ѩ\000җ\000ͽ\000ӆ\000ӵ\000Ԥ\000Փ\000ւ\000ֱ\000ͽ\000נ\000ͽ\000؏\000ؾ\000٭\000ڜ\000ۋ\000ۺ\000ܩ\000ݘ\000އ\000޶\000ߥ\000ͽ\000ࠔ\000ࡃ\000ࡲ\000ࢡ\000ͽ\000࣐\000ӵ\000ࣿ\000म\000ढ़\000ͽ\000ͽ\000ঌ\000঻\000৪\000ਙ\000ੈ\000੷\000દ\000૕\000଄\000ଳ\000ୢ\000஑\000ீ\000௯\000ఞ\000్\000౼\000ಫ\000೚\000ഉ\000സ\000൧\000ඖ\000ළ\000^\000෴\000ร\000్\000๒\000ກ\000ະ\000ໟ\000༎\000༽\000ཬ\000ྛ\000࿊\000^\000^\000࿹\000ဨ\000ၗ\000ႆ\000Ⴕ\000ფ\000ᄓ\000ᅂ\000ᅱ\000ᆠ\000ᇏ\000ᇾ\000ር\000ቜ\000ኋ\000ኺ\000ͽ\000ዩ\000ͽ\000ጘ\000ፇ\000፶\000Ꭵ\000ͽ";
  
  private static int[] g() {
    int[] arrayOfInt = new int[124];
    int i = 0;
    i = b("\000\000\000/\000^\000\000¼\000ë\000Ě\000ŉ\000Ÿ\000Ƨ\000ǖ\000ȅ\000ȴ\000ɣ\000ʒ\000ˁ\000˰\000̟\000͎\000ͽ\000ά\000ϛ\000Њ\000ͽ\000й\000Ѩ\000җ\000ͽ\000ӆ\000ӵ\000Ԥ\000Փ\000ւ\000ֱ\000ͽ\000נ\000ͽ\000؏\000ؾ\000٭\000ڜ\000ۋ\000ۺ\000ܩ\000ݘ\000އ\000޶\000ߥ\000ͽ\000ࠔ\000ࡃ\000ࡲ\000ࢡ\000ͽ\000࣐\000ӵ\000ࣿ\000म\000ढ़\000ͽ\000ͽ\000ঌ\000঻\000৪\000ਙ\000ੈ\000੷\000દ\000૕\000଄\000ଳ\000ୢ\000஑\000ீ\000௯\000ఞ\000్\000౼\000ಫ\000೚\000ഉ\000സ\000൧\000ඖ\000ළ\000^\000෴\000ร\000్\000๒\000ກ\000ະ\000ໟ\000༎\000༽\000ཬ\000ྛ\000࿊\000^\000^\000࿹\000ဨ\000ၗ\000ႆ\000Ⴕ\000ფ\000ᄓ\000ᅂ\000ᅱ\000ᆠ\000ᇏ\000ᇾ\000ር\000ቜ\000ኋ\000ኺ\000ͽ\000ዩ\000ͽ\000ጘ\000ፇ\000፶\000Ꭵ\000ͽ", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int b(String paramString, int paramInt, int[] paramArrayOfint) {
    byte b1 = 0;
    int i = paramInt;
    int j = paramString.length();
    while (b1 < j) {
      int k = paramString.charAt(b1++) << 16;
      paramArrayOfint[i++] = k | paramString.charAt(b1++);
    } 
    return i;
  }
  
  private static final int[] k = h();
  
  private static final String l = "\001\003\001\004\001\005\001\006\001\007\001\b\001\t\001\003\001\n\002\003\001\013\001\003\001\f\001\003\001\r\001\016\001\017\001\020\001\003\001\b\001\021\001\022\002\003\001\023\002\003\001\024\001\025\001\026\001\003\001\027\001\003\001\030\001\007\001\031\001\032\001\007\001\033\001\030\001\034\001\024\002\034\001\035\001\036\002\037\001 \001!\001\"\001#)\037\001\003\005\000\016\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\001\000\001$2\000\001#,\000\001$\001%N\000\001\030\017\000\001\b\016\000\001\b\b\000\001\b\021\000\001\003\005\000\001\003\001&\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001'\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\006\003\001(\007\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001)\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\n\003\001*\003\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001+\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\t\003\001,\004\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001-\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001.\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001/\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\003\003\0010\003\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003/\000\001\003\004\000\001\b\016\003\001\b\007\003\001\000\001\025\001\000\001\003\n\000\002\003\002\000\001\003\002\026\001\000\002\026\001\000\030\026\0011\0012\017\026.\000\0013\004\000\001\030N\000\001\030\001\000\001\0300\000\0014\006\000\002\035\001\000\002\035\001\000\031\035\0015\001\000\f\035\0016\001\035\007\000\0017\030\000\0013\r\000\0018\003\037\0019\001:\001\000,\037\0019\001:\001#,\037\001;\001<\001\000,\037\001=\001>\001\000)\037\002$\001\000\002$\001\000)$\001\003\005\000\002\003\001?\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\001@\006\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\007\003\001A\006\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\002\003\001B\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001C\t\003\001D\003\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001E\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\r\003\001F\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001G\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\001\003\001H\005\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\007\003\001I\006\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001J\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\026\001K\002\026\001K\016\026\0012\007\026\0012\001\026\0011\0012\017\026\007\000\0017&\000\0013)\000\001\030\005\000\002\035\001L\002\035\001L\016\035\0015\007\035\0015\002\035\0015\001\000\f\035\0016\001\035\001\000\001M&\000\001M\006\000\003\037\001;\002\000,\037\001\000\001>\001\000,\037\001;\001:\001\000,\037\0019\001>\001\000)\037\001\003\005\000\001\003\001N\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001O\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001P\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001Q\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001R\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001S\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\005\003\001T\b\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\003\003\001@\003\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\r\003\001U\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\f\003\001V\001\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001W\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001X\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001K\002\000\001K\016\000\001K\007\000\001K\002\000\001\026\021\000\001L\002\000\001L\016\000\001L\007\000\001L\002\000\001\035=\000\001Y\001\003\005\000\003\003\001Z\n\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001[\002\000\001[\016\003\001[\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001\\\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001]\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001^\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001_\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001`\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001a\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001b\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001c\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001d\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001[\002\000\001[\016\000\001[\001\000\001e\001f\027\000\001\003\005\000\001\003\001d\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001g\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001a\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001h\002\000\001h\016\003\001h\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001i\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001j\002\000\001j\016\003\001j\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001k\002\000\001k\016\003\001k\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\013\000\001l9\000\001m\030\000\001\003\001\000\001n\002\000\001n\016\003\001n\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001h\002\000\001h\016\000\001h\002\000\001f\027\000\001\003\005\000\002\003\001_\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001j\002\000\001j\t\000\001o\004\000\001j\034\000\001k\002\000\001k\016\000\001k\005\000\001p\036\000\001q3\000\001r!\000\001n\002\000\001n\016\000\001n\001s)\000\001t9\000\001u\032\000\001v7\000\001w/\000\001x'\000\001y5\000\001z3\000\001{.\000\001|\032\000\001h\002\000\001h\016\000\001h,\000\001|\034\000";
  
  private static final int m = 0;
  
  private static final int n = 1;
  
  private static final int o = 2;
  
  private static int[] h() {
    int[] arrayOfInt = new int[5076];
    int i = 0;
    i = c("\001\003\001\004\001\005\001\006\001\007\001\b\001\t\001\003\001\n\002\003\001\013\001\003\001\f\001\003\001\r\001\016\001\017\001\020\001\003\001\b\001\021\001\022\002\003\001\023\002\003\001\024\001\025\001\026\001\003\001\027\001\003\001\030\001\007\001\031\001\032\001\007\001\033\001\030\001\034\001\024\002\034\001\035\001\036\002\037\001 \001!\001\"\001#)\037\001\003\005\000\016\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\001\000\001$2\000\001#,\000\001$\001%N\000\001\030\017\000\001\b\016\000\001\b\b\000\001\b\021\000\001\003\005\000\001\003\001&\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001'\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\006\003\001(\007\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001)\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\n\003\001*\003\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001+\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\t\003\001,\004\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001-\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001.\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001/\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\003\003\0010\003\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003/\000\001\003\004\000\001\b\016\003\001\b\007\003\001\000\001\025\001\000\001\003\n\000\002\003\002\000\001\003\002\026\001\000\002\026\001\000\030\026\0011\0012\017\026.\000\0013\004\000\001\030N\000\001\030\001\000\001\0300\000\0014\006\000\002\035\001\000\002\035\001\000\031\035\0015\001\000\f\035\0016\001\035\007\000\0017\030\000\0013\r\000\0018\003\037\0019\001:\001\000,\037\0019\001:\001#,\037\001;\001<\001\000,\037\001=\001>\001\000)\037\002$\001\000\002$\001\000)$\001\003\005\000\002\003\001?\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\001@\006\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\007\003\001A\006\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\002\003\001B\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001C\t\003\001D\003\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001E\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\r\003\001F\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001G\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\001\003\001H\005\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\007\003\001I\006\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001J\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\026\001K\002\026\001K\016\026\0012\007\026\0012\001\026\0011\0012\017\026\007\000\0017&\000\0013)\000\001\030\005\000\002\035\001L\002\035\001L\016\035\0015\007\035\0015\002\035\0015\001\000\f\035\0016\001\035\001\000\001M&\000\001M\006\000\003\037\001;\002\000,\037\001\000\001>\001\000,\037\001;\001:\001\000,\037\0019\001>\001\000)\037\001\003\005\000\001\003\001N\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001O\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001P\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001Q\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001R\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001S\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\005\003\001T\b\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\016\003\001\000\003\003\001@\003\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\r\003\001U\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\f\003\001V\001\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001W\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001X\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001K\002\000\001K\016\000\001K\007\000\001K\002\000\001\026\021\000\001L\002\000\001L\016\000\001L\007\000\001L\002\000\001\035=\000\001Y\001\003\005\000\003\003\001Z\n\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001[\002\000\001[\016\003\001[\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001\\\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001]\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001^\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001_\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001`\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001a\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\013\003\001b\002\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001c\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001d\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001[\002\000\001[\016\000\001[\001\000\001e\001f\027\000\001\003\005\000\001\003\001d\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\001\003\001g\f\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\004\003\001a\t\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001h\002\000\001h\016\003\001h\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\005\000\b\003\001i\005\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001j\002\000\001j\016\003\001j\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\002\003\001\000\001k\002\000\001k\016\003\001k\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\013\000\001l9\000\001m\030\000\001\003\001\000\001n\002\000\001n\016\003\001n\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001h\002\000\001h\016\000\001h\002\000\001f\027\000\001\003\005\000\002\003\001_\013\003\001\000\007\003\001\000\001\003\001\000\001\003\n\000\002\003\002\000\001\003\002\000\001j\002\000\001j\t\000\001o\004\000\001j\034\000\001k\002\000\001k\016\000\001k\005\000\001p\036\000\001q3\000\001r!\000\001n\002\000\001n\016\000\001n\001s)\000\001t9\000\001u\032\000\001v7\000\001w/\000\001x'\000\001y5\000\001z3\000\001{.\000\001|\032\000\001h\002\000\001h\016\000\001h,\000\001|\034\000", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int c(String paramString, int paramInt, int[] paramArrayOfint) {
    byte b1 = 0;
    int i = paramInt;
    int j = paramString.length();
    label10: while (b1 < j) {
      char c1 = paramString.charAt(b1++);
      char c2 = paramString.charAt(b1++);
      c2--;
      while (true) {
        paramArrayOfint[i++] = c2;
        if (--c1 <= '\000')
          continue label10; 
      } 
    } 
    return i;
  }
  
  private static final String[] p = new String[] { "Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
  
  private static final int[] q = i();
  
  private static final String r = "\001\000\022\001\001\t\003\001\001\t\003\001\001\t\006\001\001\t\001\001\001\t\013\001\001\t\002\001\001\000\001\001\001\t\004\000\001\001\002\t\r\001\003\000\r\001\001\000\t\001\002\000\001\001\001\000\001\001\013\000\001\t\001\000\001\t\004\000\001\t";
  
  private Reader s;
  
  private int t;
  
  private static int[] i() {
    int[] arrayOfInt = new int[124];
    int i = 0;
    i = d("\001\000\022\001\001\t\003\001\001\t\003\001\001\t\006\001\001\t\001\001\001\t\013\001\001\t\002\001\001\000\001\001\001\t\004\000\001\001\002\t\r\001\003\000\r\001\001\000\t\001\002\000\001\001\001\000\001\001\013\000\001\t\001\000\001\t\004\000\001\t", i, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int d(String paramString, int paramInt, int[] paramArrayOfint) {
    byte b1 = 0;
    int i = paramInt;
    int j = paramString.length();
    label10: while (b1 < j) {
      char c1 = paramString.charAt(b1++);
      char c2 = paramString.charAt(b1++);
      while (true) {
        paramArrayOfint[i++] = c2;
        if (--c1 <= '\000')
          continue label10; 
      } 
    } 
    return i;
  }
  
  private int u = 0;
  
  private char[] v = new char[16384];
  
  private int w;
  
  private int x;
  
  private int y;
  
  private int z;
  
  private int A;
  
  private int B;
  
  private int C;
  
  private boolean D = true;
  
  private boolean E;
  
  private boolean F;
  
  private int G = 0;
  
  private final b H = new b();
  
  a(Reader paramReader) {
    this.s = paramReader;
  }
  
  a(InputStream paramInputStream) {
    this(new InputStreamReader(paramInputStream));
  }
  
  private boolean j() {
    if (this.y > 0) {
      System.arraycopy(this.v, this.y, this.v, 0, this.z - this.y);
      this.z -= this.y;
      this.x -= this.y;
      this.w -= this.y;
      this.y = 0;
    } 
    if (this.x >= this.v.length) {
      char[] arrayOfChar = new char[this.x * 2];
      System.arraycopy(this.v, 0, arrayOfChar, 0, this.v.length);
      this.v = arrayOfChar;
    } 
    int i = this.s.read(this.v, this.z, this.v.length - this.z);
    if (i > 0) {
      this.z += i;
      return false;
    } 
    if (i == 0) {
      int j = this.s.read();
      if (j == -1)
        return true; 
      this.v[this.z++] = (char)j;
      return false;
    } 
    return true;
  }
  
  public final void a() {
    this.E = true;
    this.z = this.y;
    if (this.s != null)
      this.s.close(); 
  }
  
  public final void a(Reader paramReader) {
    this.s = paramReader;
    this.D = true;
    this.E = false;
    this.F = false;
    this.z = this.y = 0;
    this.x = this.w = 0;
    this.A = this.B = this.C = 0;
    this.u = 0;
  }
  
  public final int b() {
    return this.u;
  }
  
  public final void a(int paramInt) {
    this.u = paramInt;
  }
  
  public final String c() {
    return new String(this.v, this.y, this.w - this.y);
  }
  
  public final char b(int paramInt) {
    return this.v[this.y + paramInt];
  }
  
  public final int d() {
    return this.w - this.y;
  }
  
  private void d(int paramInt) {
    String str;
    try {
      str = p[paramInt];
    } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
      str = p[0];
    } 
    throw new Error(str);
  }
  
  public void c(int paramInt) {
    if (paramInt > d())
      d(2); 
    this.w -= paramInt;
  }
  
  public b e() {
    int i = this.z;
    char[] arrayOfChar1 = this.v;
    char[] arrayOfChar2 = f;
    int[] arrayOfInt1 = k;
    int[] arrayOfInt2 = i;
    int[] arrayOfInt3 = q;
    while (true) {
      char c;
      String str;
      int m = this.w;
      this.B += m - this.y;
      boolean bool = false;
      int k;
      for (k = this.y; k < m; 
        k++) {
        switch (arrayOfChar1[k]) {
          case '\013':
          case '\f':
          case '':
          case ' ':
          case ' ':
            this.A++;
            bool = false;
            break;
          case '\r':
            this.A++;
            bool = true;
            break;
          case '\n':
            if (bool) {
              bool = false;
              break;
            } 
            this.A++;
            break;
          default:
            bool = false;
            break;
        } 
      } 
      if (bool) {
        boolean bool1;
        if (m < i) {
          bool1 = (arrayOfChar1[m] == '\n') ? true : false;
        } else if (this.E) {
          bool1 = false;
        } else {
          boolean bool2 = j();
          i = this.z;
          m = this.w;
          arrayOfChar1 = this.v;
          if (bool2) {
            bool1 = false;
          } else {
            bool1 = (arrayOfChar1[m] == '\n') ? true : false;
          } 
        } 
        if (bool1)
          this.A--; 
      } 
      int j = -1;
      k = this.x = this.y = m;
      this.t = e[this.u];
      while (true) {
        if (k < i) {
          c = arrayOfChar1[k++];
        } else {
          if (this.E) {
            byte b1 = -1;
            break;
          } 
          this.x = k;
          this.w = m;
          boolean bool1 = j();
          k = this.x;
          m = this.w;
          arrayOfChar1 = this.v;
          i = this.z;
          if (bool1) {
            byte b1 = -1;
            break;
          } 
          c = arrayOfChar1[k++];
        } 
        int n = arrayOfInt1[arrayOfInt2[this.t] + arrayOfChar2[c]];
        if (n == -1)
          break; 
        this.t = n;
        int i1 = arrayOfInt3[this.t];
        if ((i1 & 0x1) == 1) {
          j = this.t;
          m = k;
          if ((i1 & 0x8) == 8)
            break; 
        } 
      } 
      this.w = m;
      switch ((j < 0) ? j : g[j]) {
        case 6:
          return this.H.a(LexerTokenType.c, c(), this.A, this.B, this.B + d());
        case 19:
          continue;
        case 15:
          return this.H.a(LexerTokenType.g, c(), this.A, this.B, this.B + d());
        case 20:
          continue;
        case 11:
          return this.H.a(LexerTokenType.a, c(), this.A, this.B, this.B + d());
        case 21:
          continue;
        case 16:
          return this.H.a(LexerTokenType.h, c(), this.A, this.B, this.B + d());
        case 22:
          continue;
        case 12:
          str = c().substring(1, d() - 1);
          return this.H.a(LexerTokenType.m, str, this.A, this.B, this.B + d());
        case 23:
          continue;
        case 3:
          return this.H.a(LexerTokenType.b, c(), this.A, this.B, this.B + d());
        case 24:
          continue;
        case 4:
          System.out.println("Illegal character: <" + c() + ">");
          continue;
        case 25:
          continue;
        case 10:
          str = c().substring(1, d() - 1);
          return this.H.a(LexerTokenType.k, str, this.A, this.B, this.B + d());
        case 26:
          continue;
        case 18:
          return this.H.a(LexerTokenType.f, c(), this.A, this.B, this.B + d());
        case 27:
          continue;
        case 9:
          a(2);
          this.G++;
          continue;
        case 28:
          continue;
        case 14:
          if (--this.G == 0)
            a(0); 
          continue;
        case 29:
          continue;
        case 5:
          str = c().substring(1, c().length());
          return this.H.a(LexerTokenType.l, str, this.A, this.B, this.B + str.length());
        case 30:
          continue;
        case 7:
          str = c().substring(1, c().length());
          return this.H.a(LexerTokenType.n, str, this.A, this.B, this.B + str.length());
        case 31:
          continue;
        case 2:
          return this.H.a(LexerTokenType.m, c(), this.A, this.B, this.B + d());
        case 32:
          continue;
        case 13:
          this.G++;
          continue;
        case 33:
          continue;
        case 8:
          return this.H.a(LexerTokenType.d, c(), this.A, this.B, this.B + d());
        case 34:
          continue;
        case 17:
          return this.H.a(LexerTokenType.j, c(), this.A, this.B, this.B + d());
        case 35:
        case 1:
        case 36:
          continue;
      } 
      if (c == -1 && this.y == this.x) {
        this.E = true;
        return null;
      } 
      d(1);
    } 
  }
}
