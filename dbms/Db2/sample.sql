CREATE TABLE EMPLOYEE (
  EMPNO INTEGER NULL GENERATED ALWAYS AS IDENTITY,
  FIRSTNAME VARCHAR( 120 ) NULL,
  LASTNAME VARCHAR( 120 ) NOT NULL,
  SALARY INTEGER NOT NULL,
CONSTRAINT PK_TABLE_3 UNIQUE ( EMPNO )
 ) ;

create view v1 as select * from employee;

CREATE TRIGGER TRIG_SALARY NO CASCADE AFTER UPDATE ON EMPLOYEE FOR EACH ROW ATOMIC
  :new.salary := :new.salary+1;
END TRIG_SALARY


CREATE TRIGGER UPDATE_EMPLOYEE
    NO CASCADE
    BEFORE INSERT ON EMPLOYEE
    REFERENCING NEW AS NEW_EMPLOYEE
    FOR EACH ROW MODE DB2SQL
    SET NEW_EMPLOYEE.SALARY = NEW_EMPLOYEE.SALARY+1;


CREATE PROCEDURE NEW_SALARY(IN p_empno CHAR(6),OUT p_empName VARCHAR(30) ) LANGUAGE SQL
P1: BEGIN
  DECLARE v_firstName VARCHAR(12);
  DECLARE v_lastName  VARCHAR(15);
  UPDATE employee SET salary = salary * 1.05
         WHERE empno = p_empno;
  SELECT lastname, firstname INTO v_lastName, v_firstName
    FROM employee WHERE empno = p_empno;
  SET p_empName = v_lastName || ', ' || v_firstName;
END P1

Sample function:

CREATE FUNCTION PosControl()
   RETURNS REAL
   LANGUAGE SQL
   BEGIN ATOMIC
   DECLARE Test1 REAL;
   SET Test1 = RAND() * 1000;
   WHILE (Test1 < 800 OR Test1 > 900) DO
       SET Test1 = RAND() * 1000;
   END WHILE;
   RETURN Test1;
   END
   /

